version: '3'

tasks:
  build_ui:
    desc: "Build and flash the web UI to the ESP32"
    dir: client
    cmds:
    - npm install
    - npx vite build
    - gzip ./dist/index.html
    - cp ./dist/index.html.gz ../data/
  
  upload_fs:
    desc: "Upload the data folder to ESP32 SPIFFS"
    cmds:
    - task: build_fs
    - pio run --target uploadfs --environment seeed_xiao_esp32s3

  upload_ui:
    desc: "Upload the web UI to the ESP32"
    cmds:
    - task: build_ui
    - task: upload_fs
  
  upload_firmware:
    desc: "Upload the firmware to the ESP32"
    cmds:
    - pio run --target upload --environment seeed_xiao_esp32s3

  upload:
    desc: "Upload the web UI and firmware to the ESP32"
    cmds:
    - task: upload_ui
    - task: upload_firmware

  ota_firmware_upload:
    desc: "Upload the firmware to the ESP32 using OTA"
    cmds:
    - pio run --target upload --environment seeed_xiao_esp32s3 --upload-port esp32doorbell.local

  ota_upload_fs:
    desc: "Upload the data folder to ESP32 SPIFFS using OTA"
    cmds:
    - task: build_fs
    - pio run --target uploadfs --environment seeed_xiao_esp32s3 --upload-port esp32doorbell.local

  ota_upload:
    desc: "Upload the firmware and SPIFFS to the ESP32 using OTA"
    cmds:
    - task: build_fs
    - task: ota_firmware_upload
    - echo "Waiting for ESP32 to reboot..."
    - sleep 15 # wait for the ESP32 to reboot
    - task: ota_upload_fs

  build_fs:
    desc: "Build the SPIFFS filesystem"
    cmds:
    - pio run --target buildfs --environment seeed_xiao_esp32s3

  decode_mjpeg:
    desc: Check if winget is installed and decode all MJPEG files in a directory using ffmpeg.
    vars:
      input_dir: .
    cmds:
      - powershell: |
          if (-not (Get-Command winget -ErrorAction SilentlyContinue)) {
            Write-Host "winget is not installed. Please install winget to use this task.";
            exit 1;
          }
          Write-Host "winget is installed. Processing MJPEG files...";
          $outputDir = Join-Path "{{.input_dir}}" "output_jpegs";
          if (!(Test-Path $outputDir)) {
            New-Item -ItemType Directory -Path $outputDir | Out-Null;
            Write-Host "Created output directory: $outputDir";
          }
          Get-ChildItem -Path "{{.input_dir}}" -Filter *.mjpeg | ForEach-Object {
            $inputFile = $_.FullName;
            $outputFile = Join-Path $outputDir "$($_.BaseName)_%06d.jpg";
            Write-Host "Processing file: $inputFile";
            ffmpeg -i $inputFile -q:v 2 $outputFile;
          }
          Write-Host "Processing complete. Output files are in: $outputDir";